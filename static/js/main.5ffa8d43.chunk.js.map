{"version":3,"sources":["logo.svg","AddTodo.js","redux/actions.js","Todo.js","TodoList.js","containers/VisibleTodoList.js","redux/reducers.js","redux/store.js","FilterOptions.js","TasksFilter.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","connect","dispatch","addTodo","text","type","payload","props","useState","updateText","onSubmit","e","preventDefault","className","value","onChange","target","Todo","backgroundClass","done","onClick","task","TodoList","todos","onClickTodo","map","todo","index","key","VisibleTodoList","visibilityFilter","filter","toggleTodoAction","combineReducers","state","action","store","createStore","Reducer","window","__REDUX_DEVTOOLS_EXTENSION__","FilterOptions","console","log","App","TasksFilter","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mJAAAA,EAAOC,QAAU,IAA0B,kC,4ICkC5BC,cAAQ,MARI,SAAAC,GAAQ,MAClC,CACCC,QAAU,SAAAC,GAAI,aAAIF,GAAsB,mBCxBlB,ODyBPE,GADyB,cCzBZ,QD2BR,GCnBwB,CAACC,KAXvB,UAWwCC,QDiBtB,SAM3BL,EA7BC,SAACM,GAAW,IAAD,EACEC,mBAAS,IADX,mBAClBJ,EADkB,KACZK,EADY,KAEzB,OACC,0BAAMC,SAAW,SAAAC,GAChBA,EAAEC,iBACFL,EAAMJ,QAAQC,GACdK,EAAW,MAEZ,yBAAKI,UAAU,kBACd,yBAAKA,UAAU,SACd,2BAAOR,KAAK,OAAOQ,UAAU,eAAeC,MAAOV,EACnDW,SAAW,SAAAJ,GAAC,OAAIF,EAAWE,EAAEK,OAAOF,WAErC,yBAAKD,UAAU,SACd,4BAAQA,UAAU,8BAA8BR,KAAK,UAArD,kBETUY,EARF,SAACV,GACb,IAAMW,EAAkBX,EAAMY,KAAO,aAAe,YACpD,OACC,yBAAKN,UAAS,UAAKK,EAAL,kCAAsDE,QAASb,EAAMa,SACjFb,EAAMc,OCMKC,EATE,SAAC,GACjB,IADkBC,EACnB,EADmBA,MAAOC,EAC1B,EAD0BA,YAEzB,OACC,yBAAKX,UAAU,aACdU,EAAME,KAAI,SAACC,EAAMC,GAAP,OAAkB,kBAAC,EAAD,iBAAUD,EAAV,CAAgBN,QAAS,kBAAMI,EAAYG,IAAQC,IAAKD,UCgBxEE,EAFS5B,aAjBA,SAAC,GAA+B,IAA9BsB,EAA6B,EAA7BA,MAAOO,EAAsB,EAAtBA,iBAUhC,MATY,CACXP,MHG4B,QGHnBO,EAAsCP,EAC9CA,EAAMQ,QAAO,SAACL,GACb,MHDgC,cGC7BI,EACKJ,EAAKP,MAEJO,EAAKP,YAMS,SAAAjB,GAAQ,MAAK,CACvCsB,YAAc,SAAAG,GAAK,OAAIzB,EHNQ,SAAAyB,GAAU,MAAO,CAACtB,KAXvB,aAW0CC,QAASqB,GGM7CK,CAAiBL,QAG1B1B,CAA6CqB,G,wkBClBrE,IA2BeW,eAAe,mBJxBT,SIHD,WAAyB,IAAxBC,EAAuB,uDAAf,GAAIC,EAAW,uCAC3C,MJJuB,YIIpBA,EAAO9B,KAEH,GAAN,mBAAW6B,GAAX,CAAkBC,EAAO7B,UJLA,eIMf6B,EAAO9B,KAEV6B,EAAMT,KAAI,SAACC,EAAMC,GACvB,OAAGA,IAAUQ,EAAO7B,QAEZ,EAAP,GAAWoB,EAAX,eJT0B,QISWA,EAAI,OAEnCA,KAIDQ,KAYqB,cJzBG,oBIiBF,WAAsC,IAArCA,EAAoC,uDJbtC,MIa2BC,EAAW,uCACnE,MJrB4B,2BIqBzBA,EAAO9B,KAEF8B,EAAO7B,QAER4B,KAGsB,ICzBfE,EAFDC,YAAYC,EAAQC,OAAOC,8BAAgCD,OAAOC,gCCsBjEC,EAtBO,SAAClC,GAEtB,OADAmC,QAAQC,IAAIpC,EAAMa,SAEjB,yBAAKP,UAAU,OACd,yBAAKA,UAAU,SACf,4BAAQA,UAAU,4BAA4BO,QAAS,kBAAMb,EAAMa,QNCxC,SMD3B,cAIA,yBAAKP,UAAU,SACf,4BAAQA,UAAU,6BAA6BO,QAAS,kBAAMb,EAAMa,QNNnC,eMMjC,cAIA,yBAAKP,UAAU,SACf,4BAAQA,UAAU,4BAA4BO,QAAS,kBAAMb,EAAMa,QNVjC,gBMUlC,iBCVYnB,cAAQ,MAJI,SAAAC,GAAQ,MAAK,CACvCkB,QAAU,SAAAW,GAAM,OAAI7B,EPQgC,CAACG,KAXzB,yBAW+CC,QORvByB,QAGtC9B,CAAiCwC,GCiBjCG,MAhBf,WACE,OACE,kBAAC,IAAD,CAAUR,MAAOA,GACjB,yBAAKvB,UAAU,kBACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,kBACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAACgC,EAAD,WCLUC,QACW,cAA7BP,OAAOQ,SAASC,UAEe,UAA7BT,OAAOQ,SAASC,UAEhBT,OAAOQ,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5ffa8d43.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, {useState} from \"react\";\nimport {TODO_TASK, TODO_COMPLETED, addTodoAction} from \"./redux/actions\";\nimport {connect} from \"react-redux\";\n\n\nconst AddTodo = (props) => {\n\t\tconst [text, updateText] = useState(\"\")\n\t\treturn (\n\t\t\t<form onSubmit ={e => {\n\t\t\t\te.preventDefault();\n\t\t\t\tprops.addTodo(text)\n\t\t\t\tupdateText(\"\")\n\t\t\t\t\t}}>\n\t\t\t<div className=\"row form-group\">\n\t\t\t\t<div className=\"col-8\">\n\t\t\t\t\t<input type=\"text\" className=\"form-control\" value={text}\n\t\t\t\t\tonChange= {e => updateText(e.target.value)} />\n\t\t\t\t</div>\n\t\t\t\t<div className=\"col-4\">\n\t\t\t\t\t<button className=\"btn btn-primary color-white\" type=\"submit\">Add Todo</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t</form>\n\t\t\t);\n}\n\nconst mapDispatchToProps = dispatch => (\n\t{\n\t\taddTodo : text => dispatch(addTodoAction({\n\t\t\t[TODO_TASK] : text,\n\t\t\t[TODO_COMPLETED] : false\n\t\t}))\n\t});\n\nexport default connect(null, mapDispatchToProps)(AddTodo);","export const ADD_TODO = 'addTodo';\nexport const TOGGLE_TODO = 'toggleTodo';\nexport const CHANGE_FILTER = \"visibilityFilterChange\";\nexport const TODO_COMPLETED = \"done\";\nexport const TODO_TASK =\"task\"\nexport const VISIBILITY_FILTER = \"visibilityFilter\"\nexport const TODOS = \"todos\";\nexport const VISIBILITY_COMPLETED = \"completed\";\nexport const VISIBILITY_INCOMPLETE = \"incomplete\";\nexport const VISIBILITY_ALL = \"all\";\n\nexport const addTodoAction = todo => { return {type : ADD_TODO, payload: todo} }\nexport const toggleTodoAction = index => {return {type: TOGGLE_TODO, payload: index}}\nexport const changeVisibilityAction = visibility => ({type : CHANGE_FILTER, payload : visibility});","import React from \"react\";\n\nconst Todo = (props) => {\n\tconst backgroundClass = props.done ? \"bg-success\" : \"bg-danger\"\n\treturn (\n\t\t<div className={`${backgroundClass} todo-item rounded color-white`} onClick={props.onClick}>\n\t\t\t{props.task}\n\t\t</div>);\n}\n\nexport default Todo;","import React from 'react';\nimport Todo from \"./Todo\"\n\nconst TodoList = ({todos, onClickTodo}) => \n{\n\treturn (\n\t\t<div className=\"todo-list\">\n\t\t{todos.map((todo, index) => (<Todo {...todo} onClick={() => onClickTodo(index)} key={index} />))}\n\t\t</div>\n\t\t);\n}\n\nexport default TodoList","import {connect} from \"react-redux\";\nimport {VISIBILITY_COMPLETED, VISIBILITY_INCOMPLETE, VISIBILITY_ALL, toggleTodoAction} from \"../redux/actions\"\nimport TodoList from \"../TodoList\"\n\nconst mapStateToProps = ({todos, visibilityFilter}) => {\n\tlet props = {\n\t\ttodos : (visibilityFilter === VISIBILITY_ALL)? todos : (\n\t\t\ttodos.filter((todo) => {\n\t\t\t\tif(visibilityFilter === VISIBILITY_COMPLETED)\n\t\t\t\t\treturn todo.done;\n\t\t\t\telse\n\t\t\t\t\treturn !todo.done;\n\t\t\t}))\n\t}\n\treturn props\n}\n\nconst mapDispatchtoProps = dispatch => ({\n\tonClickTodo : index => dispatch(toggleTodoAction(index))\n})\n\nconst VisibleTodoList = connect(mapStateToProps, mapDispatchtoProps)(TodoList)\n\nexport default VisibleTodoList;","import {ADD_TODO, TOGGLE_TODO, CHANGE_FILTER, TODO_COMPLETED, VISIBILITY_FILTER, TODOS,VISIBILITY_ALL} from \"./actions\"\nimport {combineReducers} from 'redux';\n\nconst todoReducer = (state = [], action) => {\n\tif(action.type === ADD_TODO)\n\t{\n\t\treturn [...state, action.payload]\n\t} else if (action.type === TOGGLE_TODO)\n\t{\n\t\treturn state.map((todo, index) => {\n\t\t\tif(index === action.payload)\n\t\t\t{\n\t\t\t\treturn {...todo, [TODO_COMPLETED] : !todo[TODO_COMPLETED]}\n\t\t\t}\n\t\t\treturn todo;\n\t\t})\n\t}else\n\t{\n\t\treturn state\n\t}\n}\n\nconst changeVisibilityFilter = (state = VISIBILITY_ALL , action) => {\n\tif(action.type === CHANGE_FILTER)\n\t{\n\t\treturn action.payload\n\t}\t\n\treturn state\n}\n\nexport default combineReducers({\n\t[TODOS] : todoReducer,\n\t[VISIBILITY_FILTER] : changeVisibilityFilter\n})\n\n","import {createStore} from \"redux\";\nimport Reducer from \"./reducers\";\n\nconst store = createStore(Reducer,window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nexport default store;\n","import React from \"react\";\nimport {VISIBILITY_COMPLETED, VISIBILITY_INCOMPLETE, VISIBILITY_ALL} from \"./redux/actions\"\n\nconst FilterOptions = (props) => {\n\tconsole.log(props.onClick);\n\treturn (\n\t\t<div className=\"row\">\n\t\t\t<div className=\"col-4\">\n\t\t\t<button className=\"btn btn-primary btn-block\" onClick={() => props.onClick(VISIBILITY_ALL)} >\n\t\t\t\tALL TASKS\n\t\t\t</button>\n\t\t\t</div>\n\t\t\t<div className=\"col-4\">\n\t\t\t<button className=\" btn btn-success btn-block\" onClick={() => props.onClick(VISIBILITY_COMPLETED)}>\n\t\t\t\tCOMPLETED\n\t\t\t</button>\n\t\t\t</div>\n\t\t\t<div className=\"col-4\">\n\t\t\t<button className=\" btn btn-danger btn-block\" onClick={() => props.onClick(VISIBILITY_INCOMPLETE)}>\n\t\t\t\tINCOMPLETE\n\t\t\t</button>\n\t\t\t</div>\n\t\t</div>)\n}\n\nexport default FilterOptions;","import {connect} from \"react-redux\";\nimport {changeVisibilityAction} from \"./redux/actions\"\nimport FilterOptions from \"./FilterOptions\"\n\nconst mapDispatchToProps = dispatch => ({\n\tonClick : filter => dispatch(changeVisibilityAction(filter))\n})\n\nexport default connect(null,mapDispatchToProps)(FilterOptions);","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport AddTodo from \"./AddTodo\"\nimport VisibleTodoList from \"./containers/VisibleTodoList\"\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/store\"\nimport TasksFilter from \"./TasksFilter\"\n\nfunction App() {\n  return (\n    <Provider store={store} >\n    <div className=\"container mt-5\">\n      <div className=\"row\">\n        <div className=\"col-8 offset-2\">\n          <AddTodo />\n          <VisibleTodoList/>\n          <TasksFilter/>\n        </div>\n      </div>\n    </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}